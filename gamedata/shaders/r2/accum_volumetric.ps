#include "common.h"
#include "shadow.h"

struct 	v2p
{
	float3 	lightToPos	: TEXCOORD0;	// light center to plane vector
	float3 	vPos		: TEXCOORD1;	// position in camera space
	float 	fDensity	: TEXCOORD2;	// plane density alon Z axis
};

uniform float4              m_lmap        [2];
uniform sampler2D 	s_noise;

#define	USE_LMAP
#define	USE_LMAPXFORM
#define	USE_SHADOW

//////////////////////////////////////////////////////////////////////////////////////////
// Pixel
float4 	main	( v2p I )	: COLOR
{
        // ----- shadow
	float4	P4	= float4(I.vPos, 1);
        float4	PS	= mul( m_shadow, P4);
        float	s	= 1.h;
        #ifdef	USE_SHADOW
                  	s	= shadow(PS);
        #endif

        // ----- lightmap
        float4	lightmap = 1.h;
        #ifdef	USE_LMAP
                #ifdef	USE_LMAPXFORM
              		PS.x	= dot( P4, m_lmap[0]);
                        PS.y	= dot( P4, m_lmap[1]);
                #endif
                lightmap = tex2Dproj(s_lmap, PS);        //
        #endif

	// ----- attenuate
	float rsqr	= dot( I.lightToPos, I.lightToPos); // distance 2 light (squared)
  	float  att 	= saturate( 1 - rsqr * Ldynamic_pos.w ); // q-linear attenuate

	// ----- noise
	PS.xy /= PS.w;
	float time = timers.z*0.1;	
	PS.xy /= 3;
	PS.x += time;
	float4	t_noise	= tex2D(s_noise,PS);
	PS.x -= time;
	PS.y -= time*0.70091;
	t_noise *= tex2D(s_noise,PS);
	t_noise = t_noise*0.5+0.5;

	// out
	float maxIntens = I.fDensity;
	float3	result = maxIntens * s * att;
	result *= lightmap;
	result *= Ldynamic_color * t_noise;

	return  float4( result, 0);
}