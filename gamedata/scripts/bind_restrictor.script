--[[------------------------------------------------------------------------------------------------
Space restrictor binder
Чугай Александр

Примечания:
	- обновлений у рестрикторов нету, поэтому для тех, кому надо, актёр вызывает искусственно на своём обновлении
--------------------------------------------------------------------------------------------------]]
function bind( obj )
	obj:bind_object( restrictor_binder( obj ) )
end

----------------------------------------------------------------------------------------------------
class "restrictor_binder" ( object_binder )

function restrictor_binder:__init(obj, char_ini) super(obj)
	self.initialized = false
	self.loaded = false
end

function restrictor_binder:reload(section)
	object_binder.reload(self, section)
end

function restrictor_binder:reinit()
	object_binder.reinit(self)

	db.storage[self.object:id()] = db.storage[self.object:id()] and empty_table(db.storage[self.object:id()]) or {}
	self.st = db.storage[self.object:id()]
end

function restrictor_binder:net_spawn(se_abstract)
	if not object_binder.net_spawn( self,se_abstract ) then
		return false
	end

	db.add_zone(self.object)
	db.add_obj(self.object)

	local obj_id = self.object:id()
	if(xr_sound.looped_sound[obj_id]) then
		for k,v in pairs(xr_sound.looped_sound[obj_id]) do
			xr_sound.play_sound_looped(obj_id, k)
		end
	end

	self.object:set_callback(callback.zone_enter, self.on_enter, self)
	self.object:set_callback(callback.zone_exit, self.on_exit, self)
	
	--' Если это рестиктор информационной территории - зарегистрить его.
	-- local ini = self.object:spawn_ini()
	-- if not ini then
		-- return true
	-- end

	-- if ini:section_exist("information_sector") then
		-- sr_danger.register_new_sector(self.object)
	-- end

	-- if ini:section_exist("apply_on_combat") then
		-- combat_restrictor.register_combat_restrictor(self.object)
	-- end
	return true
end

function restrictor_binder:net_destroy()
	xr_sound.stop_sounds_by_id(self.object:id())
	local st = db.storage[self.object:id()]
	if st.active_scheme then
		xr_logic.issue_event(self.object, st[st.active_scheme], "net_destroy")
	end

	self.object:set_callback(callback.zone_enter, nil)
	self.object:set_callback(callback.zone_exit, nil)
	
	db.actor_inside_zones[self.object:name()] = nil 
	
	db.del_zone( self.object )
	db.del_obj(self.object)

	--db.storage[self.object:id()] = nil

	object_binder.net_destroy(self)
end


-- вызывается из обновления актёра!(БРЕХНЯ!!!!!!!)
function restrictor_binder:update(delta)
	if not self.initialized and db.actor then
		self.initialized = true
		xr_logic.initialize_obj(self.object, self.st, self.loaded, db.actor, modules.stype_restrictor)
	end

	if self.st.active_section ~= nil then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "update", delta)
	end
	xr_sound.update(self.object:id())
end

function restrictor_binder:net_save_relevant()
	return true
end

function restrictor_binder:save(packet)
	set_save_marker(packet, "save", false, "restrictor_binder")
	object_binder.save(self, packet)

	xr_logic.save_obj(self.object, packet)
	set_save_marker(packet, "save", true, "restrictor_binder")
end

function restrictor_binder:load(reader)
	set_save_marker(reader, "load", false, "restrictor_binder")
	self.loaded = true

	object_binder.load(self, reader)

	xr_logic.load_obj(self.object, reader)
	set_save_marker(reader, "load", true, "restrictor_binder")
end


function restrictor_binder:on_enter(zone, obj)
	if (obj and obj:id() == AC_ID) then 
		db.actor_inside_zones[zone:name()] = zone
		--printf("# Enter zone: %s", zone:name())
	end
end
function restrictor_binder:on_exit(zone, obj)
	if (obj and obj:id() == AC_ID) then 
		db.actor_inside_zones[zone:name()] = nil
		--printf("# Exit zone: %s", zone:name())
	end 
end
