--[[
Изменения script_version:
        4 - сохранение поля job_online
        5 - сохранение поля was_in_smart_terrain
]]

class "se_monster" (cse_alife_monster_base)
--------------------
function se_monster:__init (section) super (section)
	db.offline_objects[self.id] = empty_table(db.offline_objects[self.id])
end
--------------------
function se_monster:can_switch_offline()
	if self.group_id ~= 65535 then
		return true
	end
	return cse_alife_monster_base.can_switch_offline(self)
end
--------------------
function se_monster:can_switch_online()
    return cse_alife_monster_base.can_switch_online(self)
    -- if self.group_id ~= 65535 then
        -- return true
    -- end
	-- return false
end
function se_monster:switch_online()
	--utils_data.debug_write(strformat("se_monster:switch_online %s",self:name()))
    cse_alife_monster_base.switch_online(self)
end
function se_monster:switch_offline()
	cse_alife_monster_base.switch_offline(self)
end
-----------------------
function se_monster:STATE_Write(packet)
	--utils_data.debug_write(strformat("%s STATE_Write",self:name()))
	cse_alife_monster_base.STATE_Write (self, packet)
	packet:w_stringZ(tostring(db.offline_objects[self.id] and db.offline_objects[self.id].level_vertex_id))
	packet:w_stringZ(tostring(db.offline_objects[self.id] and db.offline_objects[self.id].active_section))
end
--------------------
function se_monster:STATE_Read(packet, size)
	--utils_data.debug_write("\nse_monster:STATE_Read "..self:name().." START")
	cse_alife_monster_base.STATE_Read (self, packet, size)
	if self.script_version > 10 then
		db.offline_objects[self.id] = db.offline_objects[self.id] or {}
		db.offline_objects[self.id].level_vertex_id = tonumber(packet:r_stringZ())
		local v = packet:r_stringZ()
		db.offline_objects[self.id].active_section = v ~= "nil" and v ~= "" and v or nil
	end
	--utils_data.debug_write("se_monster:STATE_Read "..self:name().." END\n")
end
--------------------
function se_monster:on_before_register()
end
--------------------
function se_monster:on_register()
	--utils_data.debug_write("\nse_monster:on_register "..self:name().." START")
	cse_alife_monster_base.on_register( self )
	SendScriptCallback("server_entity_on_register",self,"se_monster")

	if db.offline_objects[self.id] == nil then
		db.offline_objects[self.id] = {}
	end
--      db.offline_objects[self.id].level_vertex_id = self.m_level_vertex_id

	--' Отключаем старый метод выбора смарттеррейнов.
	self:brain():can_choose_alife_tasks(false)

	--' Выбор смарта
	local spawn_ini = self:spawn_ini()
	local smartn = spawn_ini and spawn_ini:r_string_ex("logic","smart_terrain")
	local smart = smartn and SIMBOARD:get_smart_by_name(smartn)
	
	if (smart) then 
		smart:register_npc(self) 
	end
	
	--utils_data.debug_write("se_monster:on_register "..self:name().." END")
end
--------------------
function se_monster:on_unregister()
	local strn_id = self:smart_terrain_id()
	if strn_id ~= 65535 then
		local smart = alife_object(strn_id)
		if smart ~= nil then
			smart:unregister_npc(self)
		end
	end
	db.offline_objects[self.id] = nil
	SendScriptCallback("server_entity_on_unregister",self,"se_monster")
	cse_alife_monster_base.on_unregister(self)
end
--------------------
function se_monster:on_death(killer)
	--utils_data.debug_write(strformat("se_monster:on_death %s killer=%s",self:name(),killer and killer:name()))
	cse_alife_monster_base.on_death(self, killer)
	
	smart_terrain.on_death(self)

	local squad = self.group_id and self.group_id < 65535 and alife_object(self.group_id)
	if (squad) then
		squad:on_npc_death(self,killer)
	end
	
	if (level.map_has_object_spot(self.id,"red_location") == 1) then
		level.map_remove_object_spot(self.id, "red_location")
	end
end
--------------------
function se_monster:update()
	if not self.first_update then self.first_update = true end
    cse_alife_monster_base.update(self)
end
